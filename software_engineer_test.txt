Basic Rules
===========
1. Review the questions in this file. Reply back via email with an estimated
   delivery date.
2. Answer each of the questions below.
3. Add your answer to each question to this file, in-line.
4. Send the final file back for review.
5. Bonus points if you add this initial file to your public git repo and share
   that repo with us so we can see how your answers progressed.
6. You may use external sources to help answer the questions (i.e. Google, etc),
   but you should always cite your sources in your comments. Learning from
   others is good. Plagiarism is bad.


Developer Test
==============

1.  What editor will you use to edit this file, and why?
	Notepad++ and Visual Studio 2015. I've been using this editor for almost my entire career, plus is a very rich full featured editor. Since I'm only editing a single, non-code file (extension is TXT) I can update this file quickly with Notepad++.
	For code the later questions that require code, I'll be using Visual Studio to craft the code, execute and test it. 
	
2.  Some of the questions will ask for a solution in the language of
    your choice.  What language(s) will you choose, and why?
	C# and JS. C# is my main compiled language as a full stack developer. I know and understand the language and the .Net framework deep enough where I feel comfortable and efficient. 
	JS is my preferred scripting language both for web and backend (nodejs). I feel I have enough mastery of JavaScript to provide production ready solutions.
	
3.  Explain the difference between testing and debugging.
	Testing is used to prove that the program behaves in the way it is supposed to. It is used to validate logic and expected results. Debugging, in the other hand, is used to walk through the code with the purpose of finding and getting rid of bugs. This is mostly done at development time, but can happen at any stage of a project. Bugs are unwanted/broken behavior. A Perfomance issue may constitute a bug, if it prevents the application to behave in the expected manner, although, not a;ll performance issues are bugs e.g. lack of processing resources, usage spikes, etc. 
	
4.  Consider a user querying a search engine.  Describe, in as much
    detail as you like, what happens between the user clicking the
    "submit" button and the display of the results.

	When a user clicks the submit button, depending on the way the search box is constructed, the content of the textbox will be submitted back to the server in the form of either a GET or POST (most of the time a GET), for the server to process. 
	Under the hood, the browser will initiate a TCP/IP handshake to establish a session with the server. The browser wil then send the search query in either two ways: if POST, it will add the search query in the payload of the request, if GET, it will append (and encode) the search string as part of the URL followed by a "?" sign.
	The server will receive the request, parse the query string and process the payload on the request, if any (in ASP.Net this happens regardless of HTTP verb used). Use the search query to "search", let's say, agaisnt the database.
	Once the information that matches the search is found, it is sent back to the requester in the payload of the response.
	The browser will process the response and display the results, using HTML and JavaScript. 
	
The two tables below describe relationships between employees,
managers, and departments (the columns employee.mgr_id and
department.head both refer to employee.id).  Use these definitions to
answer questions 5-10.  If you need to use any nonstandard functions or
syntax, be sure to name the DBMS that implements them.

employee                              department
----------------------------------    -----------------------
 id |        name        | mgr_id           name      | head
----+--------------------+--------    ----------------+------
  1 | Jonathan Archer    |     11      Operations     |   11
  2 | Christopher Pike   |     12      Marketing      |   12
  3 | James Kirk         |     13      IT             |   13
  4 | Jean-Luc Picard    |     14      HR             |   14
  5 | Kathryn Janeway    |     15      Sales          |   15
  6 | Ralph Wiggum       |     11
  7 | Troy McClure       |     12
  8 | Waylon Smithers    |     17
  9 | Edna Krabappel     |     16
 10 | Ned Flanders       |     15
 11 | Buffy Summers      |
 12 | Xander Harris      |
 13 | Willow Rosenberg   |
 14 | Rupert Giles       |
 15 | Oz Selbie          |
 16 | Dade Murphy        |     11
 17 | Kate Libby         |     13
 18 | Paul Cook          |     17
 19 | Emmanuel Goldstein |     16
 20 | Winston Smith      |     15
 21 | Thomas Anderson    |     15
 22 | Agent Smith        |     14
 23 | Malcolm Reynolds   |     14
 24 | River Tam          |     18
 25 | Jason Nesmith      |     18

5.  Write an SQL query to list the full name of every employee,
    alphabetized by first name.
	
	SELECT name FROM employee ORDER BY name;
	
6.  Write an SQL query to list the full name of every employee,
    alphabetized by last name.
	
	-- Reference: https://msdn.microsoft.com/en-us/library/ms181984.aspx
	SELECT name FROM employee 
	ORDER BY SUBSTRING(name, CHARINDEX(' ', name) + 1, LEN(name) - CHARINDEX(' ', name));
	
7.  Write an SQL query to list the full name of every employee along
    with the full name of his/her manager.
	
	SELECT e.name as 'Employee Name', mngr.name as 'Manager Name'
	FROM employee e
	LEFT JOIN employee mngr on e.mgr_id = mngr.id;
	
8.  Write an SQL query to list the full name of every employee in the
    Sales department.
	
	-- Added UNION to also add Head of Department as part of the result.
	SELECT e.name AS 'Employee Name' FROM employee e
	INNER JOIN department d on e.id = d.head
	WHERE d.name = 'Sales'
	UNION
	SELECT e.name AS 'Employee Name' FROM employee e
	INNER JOIN department d on e.mgr_id = d.head
	WHERE d.name = 'Sales';	
	
9.  Write an SQL query to list the full name of every employee along
    with name of his/her department.
	
	-- Added UNION to also add Head of Department as part of the result.
	SELECT e.name as 'Employee Name', d.name as 'Department'
	FROM employee e
	INNER JOIN employee mngr on e.mgr_id = mngr.id
	LEFT JOIN department d on d.head = mngr.id
	UNION
	SELECT e.name as "Employee Name", d.name as 'Department'
	FROM employee e
	INNER JOIN department d on d.head = e.id;
	
10. Is there a better design for a database that supports the queries
    described in questions 5-9?  If so, describe it.  If not, why not?

	We could, instead of having a table that references only the heads of departments (which forces us to alway do an extra join in order to get department specific employess), change the structure such as 
	
		employee                              department
	----------------------------------    --------------------------
	 id |        name        | mgr_id           name      | empl_id
	----+--------------------+--------    ----------------+---------
	
	With a Primary Key contraint of department(name, empl_id) to enforce referencial integrity.
	
11. Write a function in the language of your choice that implements
    quicksort on an array of integers.
	
	public int[] QuickSort(int[] list)
	{
		if (list.Length <= 1) { return list; }

		var listToSort = new List<int>(list); // Created new list to leverage linq extensions.
		var wall = -1; // Value that will determine where the list will be partioned.

		// For simplicity we always select the last item as pivot. We could have a random number to minimize worst case scenario and/or use 2 iterators in the for loop. I went with the simpler, easier to understand implementation.
		var pivot = listToSort.Count() - 1;
		
		for (int i = 0; i < listToSort.Count() - 1; i++)
		{
			if ((listToSort[i] < listToSort[pivot]))
			{
				wall++;
				var t = listToSort[wall];
				listToSort[wall] = listToSort[i];
				listToSort[i] = t;
			}
		}

		wall++;

		// Swap Pivot with wall. This means the pivot value is in its correct position.
		var temp = listToSort[wall];
		listToSort[wall] = listToSort[pivot];
		listToSort[pivot] = temp;

		// Create partitions for list. Left side are any numbers lower than the wall, Right side numbers higher than the wall.
		var left = listToSort.Where((elem, i) => i < wall).ToArray();
		var right = listToSort.Where((elem, i) => i >= wall).ToArray();

		// Exit condition. Grouping to account for duplicates.
		if (left.GroupBy((v) => v).Count() <= 1 && right.GroupBy((v) => v).Count() <= 1)
		{
			return left.Concat(right).ToArray();
		}

		// Repeat sort for Left and Right partitions.
		return QuickSort(left).Concat(QuickSort(right)).ToArray();
	}
	
	
12. Write a function in the language of your choice that performs
    binary search on a sorted array of integers.
	
	
13. Write a function in the language of your choice performs the query
    you wrote for question 7, and outputs the results as an HTML table.
14. Write a program in the language of your choice that takes a filename
    and a number N as arguments and retrieves and outputs the Nth line
    from the file.
15. Write the function from question 12 in a different language.
16. Write the program from question 14 in a different language (it can
    be the same language you used for #15, but it doesn't have to be).
